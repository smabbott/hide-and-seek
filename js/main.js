// Generated by CoffeeScript 1.3.3
(function() {
  var Card, FiltersController, Toggle;

  Card = (function() {

    Card.prototype.el = {};

    function Card(publicProperties) {
      this.publicProperties = publicProperties;
    }

    Card.prototype.template = function() {
      return $('#card-template').html();
    };

    Card.prototype.render = function() {
      if (this.el.remove) {
        this.el.remove();
      }
      this.el = $(Mustache.render(this.template(), this.publicProperties));
      return this.applyHandlers();
    };

    Card.prototype.applyHandlers = function() {
      var self;
      self = this;
      return self.el.on('click', 'input[name=chosen]', function(e) {
        self.publicProperties['chosen'] = self.el.find('input[name=chosen]:checked').val();
        return self.el.trigger('card:updated');
      });
    };

    return Card;

  })();

  Toggle = (function() {

    Toggle.state = true;

    function Toggle(el) {
      this.el = el;
      this.target = this.el.data('target');
      this.el.on('click', {
        self: this
      }, this.toggle);
    }

    Toggle.prototype.toggle = function(e) {
      this.state = !this.state;
      e.data.self.el.toggleClass('selected');
      return $('.sidebar').trigger('toggle:clicked', e.data.self);
    };

    return Toggle;

  })();

  FiltersController = (function() {

    function FiltersController(el) {
      var self;
      this.el = el;
      self = this;
      this.filters = [];
      this.el.on('toggle:clicked', {
        self: self
      }, this.update);
      $('.candidates').on('card:updated', function(e) {
        return self.filter();
      });
    }

    FiltersController.prototype.update = function(e, toggle) {
      var filterIndex;
      filterIndex = e.data.self.filters.indexOf(toggle.target);
      if (filterIndex > -1) {
        e.data.self.filters.splice(filterIndex, 1);
      } else {
        e.data.self.filters.push(toggle.target);
      }
      return e.data.self.filter();
    };

    FiltersController.prototype.filter = function() {
      var card, filter, k, v, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
      if (this.filters.length > 0) {
        _ref = window.cards;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          card.el.hide();
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = this.filters;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              filter = _ref1[_j];
              k = filter.match(/^(.*)\:/)[1];
              v = filter.match(/\:(.*)$/)[1];
              if ((card.publicProperties[k] === v) || (card.publicProperties['tags'].indexOf(v) > -1)) {
                card.el.show();
                break;
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      } else {
        _ref1 = window.cards;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          card = _ref1[_j];
          _results1.push(card.el.show());
        }
        return _results1;
      }
    };

    return FiltersController;

  })();

  $(function() {
    var candidate, card, filtersController, tag, tags, tmp, toggle, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
    window.cards = (function() {
      var _i, _len, _ref, _results;
      _ref = window.candidates;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        candidate = _ref[_i];
        _results.push(new Card(candidate));
      }
      return _results;
    })();
    _ref = window.cards;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      card = _ref[_i];
      card.render();
      $('.candidates').append(card.el);
    }
    window.toggles = (function() {
      var _j, _len1, _ref1, _results;
      _ref1 = $('.toggle');
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        toggle = _ref1[_j];
        _results.push(new Toggle($(toggle)));
      }
      return _results;
    })();
    filtersController = new FiltersController($('.sidebar'));
    tags = [];
    _ref1 = window.candidates;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      candidate = _ref1[_j];
      tags = tags.concat(candidate.tags);
    }
    tags = $.unique(tags);
    _results = [];
    for (_k = 0, _len2 = tags.length; _k < _len2; _k++) {
      tag = tags[_k];
      tmp = Mustache.render($('#tag-toggle-template').html(), {
        name: tag
      });
      toggle = new Toggle($(tmp));
      _results.push($('#tags').append($('<li></li>').append(toggle.el)));
    }
    return _results;
  });

}).call(this);
